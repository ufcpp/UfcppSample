@page "/"

<style>
    div.algorithm {
        display: inline-block;
    }

    div.name {
        font-size: large;
        font-weight: bold;
        color: forestgreen;
    }

    span.bar {
        display: inline-block;
        width: 2px;
        background-color: lightgreen;
    }

    span.swap {
        background-color: red;
    }

    span.compare {
        background-color: green;
    }
</style>

<div>
    <button @onclick="@Shuffle">Shuffle</button>
    <button @onclick="@RunAsync">Run</button>
</div>

@foreach (var state in _sortStates)
{
    <div class="algorithm">
        <div class="name">@state.Name</div>

        @for (int i = 0; i < state.Items.Length; i++)
        {
            var x = state.Items[i];
            var (kind, i1, i2) = state.Current;

            var c = "bar";
            if (i == i1 || i == i2)
                c = kind == Sort.Kind.Compare ? "bar compare" : "bar swap";

            <span class="@c" style="height:@(x)px;"></span>
        }
    </div>
}

<div>
    @*
    *@
</div>

@code {
    int[] _array = null!;
    Sort.State[] _sortStates = null!;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Shuffle();
    }

    private void Shuffle()
    {
        ShuffleArray();
        ResetStates();
    }

    private void ShuffleArray() => _array = Util.GetShuffledArray(100);

    private void ResetStates() => _sortStates = Sort.Algorithms.Select(a => a.Start(_array.ToArray())).ToArray();

    async Task RunAsync()
    {
        ResetStates();

        bool moveNext()
        {
            var any = false;
            foreach (var s in _sortStates) any |= s.MoveNext();
            return any;
        }

        while (moveNext())
        {
            StateHasChanged();
            await Task.Delay(1);
        }
    }
}
